/**
 * 状态模式（一）
 * 
 * <pre>
 * 银行系统中的账户类设计
 * 
 *  软件公司欲为某银行开发一套信用卡业务系统，银行账户(Account)是该系统的核心类之一，
 *  通过分析，软件公司开发人员发现在该系统中，账户存在三种状态，且在不同状态下账户存在不同的行为，具体说明如下：
 *  
 *      (1) 如果账户中余额大于等于0，则账户的状态为正常状态(Normal State)，此时用户既可以向该账户存款也可以从该账户取款；
 *      
 *      (2) 如果账户中余额小于0，并且大于-2000，则账户的状态为透支状态(Overdraft State)，此时用户既可以向该账户存款也可以从该账户取款，但需要按天计算利息；
 *      
 *      (3) 如果账户中余额等于-2000，那么账户的状态为受限状态(Restricted State)，此时用户只能向该账户存款，不能再从中取款，同时也将按天计算利息；
 *      
 *      (4) 根据余额的不同，以上三种状态可发生相互转换。
 *      
 * 分析上述代码，我们不难发现存在如下几个问题：
 * 
 *  (1) 几乎每个方法中都包含状态判断语句，以判断在该状态下是否具有该方法以及在特定状态下该方法如何实现，导致代码非常冗长，可维护性较差；
 *  
 *  (2) 拥有一个较为复杂的stateCheck()方法，包含大量的if…else if…else…语句用于进行状态转换，代码测试难度较大，且不易于维护；
 *  
 *  (3) 系统扩展性较差，如果需要增加一种新的状态，如冻结状态（Frozen State，在该状态下既不允许存款也不允许取款），需要对原有代码进行大量修改，扩展起来非常麻烦。
 *  
 * 为了解决这些问题，我们可以使用状态模式，
 * 在状态模式中，我们将对象在每一个状态下的行为和状态转移语句封装在一个个状态类中，
 * 通过这些状态类来分散冗长的条件转移语句，让系统具有更好的灵活性和可扩展性，状态模式可以在一定程度上解决上述问题。
 * </pre>
 *
 * @author colg
 */
package cn.colg.example._01;
// TODO colg [08-StatePattern 状态模式]