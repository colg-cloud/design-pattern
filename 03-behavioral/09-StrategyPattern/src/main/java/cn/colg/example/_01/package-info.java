/**
 * 策略模式（一）
 * 
 * <pre>
 * 电影票打折方案
 * 
 * 软件公司为某电影院开发了一套影院售票系统，在该系统中需要为不同类型的用户提供不同的电影票打折方式，具体打折方案如下：
 * 
 *  (1) 学生凭学生证可享受票价8折优惠；
 *  
 *  (2) 年龄在10周岁及以下的儿童可享受每张票减免10元的优惠（原始票价需大于等于20元）；
 *  
 *  (3) 影院VIP用户除享受票价半价优惠外还可进行积分，积分累计到一定额度可换取电影院赠送的奖品。
 *  
 * 该系统在将来可能还要根据需要引入新的打折方式。
 * 
 * 为了实现上述电影票打折功能，软件公司开发人员设计了一个电影票类MovieTicket
 * 
 * 通过MovieTicket类实现了电影票的折后价计算，该方案解决了电影票打折问题，
 * 每一种打折方式都可以称为一种打折算法，更换打折方式只需修改客户端代码中的参数，无须修改已有源代码，但该方案并不是一个完美的解决方案，它至少存在如下三个问题：
 * 
 *  (1) MovieTicket类的calculate()方法非常庞大，它包含各种打折算法的实现代码，在代码中出现了较长的if…else…语句，不利于测试和维护。
 *  
 *  (2) 增加新的打折算法或者对原有打折算法进行修改时必须修改MovieTicket类的源代码，违反了“开闭原则”，系统的灵活性和可扩展性较差。
 *  
 *  (3) 算法的复用性差，如果在另一个系统（如商场销售管理系统）中需要重用某些打折算法，只能通过对源代码进行复制粘贴来重用，无法单独重用其中的某个或某些算法（重用较为麻烦）
 *  
 *  如何解决这三个问题？
 *      导致产生这些问题的主要原因在于MovieTicket类职责过重，它将各种打折算法都定义在一个类中，这既不便于算法的重用，也不便于算法的扩展。
 *      因此我们需要对MovieTicket类进行重构，将原本庞大的MovieTicket类的职责进行分解，将算法的定义和使用分离，这就是策略模式所要解决的问题。
 * </pre>
 *
 * @author colg
 */
package cn.colg.example._01;