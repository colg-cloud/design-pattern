/**
 * 抽象工厂模式（一）
 * 
 * <pre>
 * 基于工厂方法模式设计的界面皮肤库有如下问题：
 * 
 *  (1) 当需要增加新的皮肤时，虽然不要修改现有代码，但是需要增加大量类，针对每一个新增具体组件都需要增加一个具体工厂，类的个数成对增加，这无疑会导致系统越来越庞大，增加系统的维护成本和运行开销；
 *  
 *  (2) 由于同一种风格的具体界面组件通常要一起显示，因此需要为每个组件都选择一个具体工厂，用户在使用时必须逐个进行设置，如果某个具体工厂选择失误将会导致界面显示混乱，虽然可以适当增加一些约束语句，但客户端代码和配置文件都较为复杂。
 *  
 * 如何减少系统中类的个数并保证客户端每次始终只使用某一种风格的具体界面组件？
 *  工厂方法模式无法解决这两个问题，抽象工厂模式可以让这些问题迎刃而解。
 * </pre>
 *
 * @author colg
 */
package cn.colg.example._01;