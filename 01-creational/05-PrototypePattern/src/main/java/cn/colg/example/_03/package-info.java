/**
 * 原型模式（三）
 * 
 * <pre>
 * 1.浅克隆
 * 
 *  在浅克隆中，如果原型对象的成员变量是值类型，将复制一份给克隆对象；
 *  如果原型对象的成员变量是引用类型，则将引用对象的地址复制一份给克隆对象，也就是说原型对象和克隆对象的成员变量指向相同的内存地址。
 *  简单来说，在浅克隆中，当对象被复制时只复制它本身和其中包含的值类型的成员变量，而引用类型的成员对象并没有复制
 *  
 *  在Java语言中，通过覆盖Object类的clone()方法可以实现浅克隆。
 *  
 * 2.深克隆
 * 
 *  在深克隆中，无论原型对象的成员变量是值类型还是引用类型，都将复制一份给克隆对象，深克隆将原型对象的所有引用对象也复制一份给克隆对象。
 *  简单来说，在深克隆中，除了对象本身被复制外，对象所包含的所有成员变量也将复制
 *  
 *  在Java语言中，如果需要实现深克隆，可以通过序列化(Serialization)等方式来实现。
 *  通过序列化实现的拷贝不仅可以复制对象本身，而且可以复制其引用的成员对象，因此通过序列化将对象写到一个流中，再从流里将其读出来，可以实现深克隆。
 *  
 *  深克隆技术实现了原型对象和克隆对象的完全独立，对任意克隆对象的修改都不会给其他对象产生影响，是一种更为理想的克隆实现方式。
 * </pre>
 *
 * @author colg
 */
package cn.colg.example._03;